
{
  "openapi": "3.0.0",
  "info": {
    "title": "Travel Yatra API",
    "version": "1.0.0",
    "description": "API documentation for the Travel Yatra car rental application."
  },
  "servers": [
    {
      "url": "http://localhost:9002",
      "description": "Local development server"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "phoneNumber": { "type": "string", "nullable": true },
          "role": { "type": "string", "enum": ["Customer", "Manager", "Admin"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time", "nullable": true },
          "address": { "$ref": "#/components/schemas/Address", "nullable": true },
          "location": { "type": "string", "nullable": true },
          "documents": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserDocument" },
            "nullable": true
          },
          "favoriteCarIds": { "type": "array", "items": { "type": "string" }, "nullable": true }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": { "type": "string" },
          "city": { "type": "string" },
          "state": { "type": "string" },
          "zip": { "type": "string" },
          "country": { "type": "string" }
        },
        "required": ["street", "city", "state", "zip", "country"]
      },
      "UserDocument": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["PhotoID", "DrivingLicense"] },
          "fileName": { "type": "string" },
          "filePath": { "type": "string" },
          "uploadedAt": { "type": "string", "format": "date-time" },
          "status": { "type": "string", "enum": ["Pending", "Approved", "Rejected"] },
          "adminComments": { "type": "string", "nullable": true },
          "verifiedAt": { "type": "string", "format": "date-time", "nullable": true },
          "verifiedBy": { "type": "string", "format": "ObjectId", "nullable": true }
        }
      },
      "Car": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "name": { "type": "string" },
          "type": { "type": "string", "enum": ["Sedan", "SUV", "Hatchback", "Truck", "Van", "Convertible", "Coupe"] },
          "pricePerHour": { "type": "number" },
          "minNegotiablePrice": { "type": "number", "nullable": true },
          "maxNegotiablePrice": { "type": "number", "nullable": true },
          "imageUrls": { "type": "array", "items": { "type": "string", "format": "uri" } },
          "description": { "type": "string" },
          "longDescription": { "type": "string" },
          "features": { "type": "array", "items": { "type": "string" } },
          "availability": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "startDate": { "type": "string", "format": "date" },
                "endDate": { "type": "string", "format": "date" }
              }
            }
          },
          "seats": { "type": "integer" },
          "engine": { "type": "string" },
          "transmission": { "type": "string", "enum": ["Automatic", "Manual"] },
          "fuelType": { "type": "string", "enum": ["Petrol", "Diesel", "Electric", "Hybrid"] },
          "rating": { "type": "number" },
          "reviews": { "type": "integer" },
          "location": { "type": "string" },
          "aiHint": { "type": "string", "nullable": true }
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId" },
          "carId": { "type": "string", "format": "ObjectId" },
          "carName": { "type": "string" },
          "carImageUrl": { "type": "string", "format": "uri", "nullable": true },
          "userId": { "type": "string", "format": "ObjectId" },
          "userName": { "type": "string" },
          "startDate": { "type": "string", "format": "date-time" },
          "endDate": { "type": "string", "format": "date-time" },
          "totalPrice": { "type": "number" },
          "status": { "type": "string", "enum": ["Pending", "Confirmed", "Cancelled", "Completed", "Cancellation Requested", "Cancellation Rejected"] },
          "createdAt": { "type": "string", "format": "date-time", "nullable": true },
          "updatedAt": { "type": "string", "format": "date-time", "nullable": true },
          "razorpayOrderId": { "type": "string", "nullable": true },
          "razorpayPaymentId": { "type": "string", "nullable": true }
        }
      },
      "SiteSettings": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "ObjectId", "nullable": true },
          "siteTitle": { "type": "string" },
          "defaultCurrency": { "type": "string", "enum": ["USD", "EUR", "GBP", "INR"] },
          "maintenanceMode": { "type": "boolean", "nullable": true },
          "sessionTimeoutMinutes": { "type": "integer", "nullable": true },
          "smtpHost": { "type": "string", "nullable": true },
          "smtpPort": { "type": "integer", "nullable": true },
          "smtpUser": { "type": "string", "nullable": true },
          "smtpSecure": { "type": "boolean", "nullable": true },
          "emailFrom": { "type": "string", "format": "email", "nullable": true },
          "updatedAt": { "type": "string", "format": "date-time", "nullable": true }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "errors": { "type": "object", "additionalProperties": { "type": "array", "items": { "type": "string" } }, "nullable": true }
        }
      },
      "RegisterInput": {
        "type": "object",
        "required": ["fullName", "email", "password"],
        "properties": {
          "fullName": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string", "minLength": 6 },
          "phoneNumber": { "type": "string", "nullable": true }
        }
      },
      "LoginInput": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": { "type": "string", "format": "email" },
          "password": { "type": "string" }
        }
      },
      "ForgotPasswordInput": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": { "type": "string", "format": "email" }
        }
      },
      "ResetPasswordInput": {
        "type": "object",
        "required": ["token", "password"],
        "properties": {
          "token": { "type": "string" },
          "password": { "type": "string", "minLength": 6 }
        }
      },
      "ProfileUpdateInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "nullable": true },
          "phoneNumber": { "type": "string", "nullable": true },
          "address": { "$ref": "#/components/schemas/Address", "nullable": true },
          "location": { "type": "string", "nullable": true }
        }
      },
      "DocumentUploadInput": {
        "type": "object",
        "required": ["documentType", "fileName", "filePath"],
        "properties": {
          "documentType": { "type": "string", "enum": ["PhotoID", "DrivingLicense"] },
          "fileName": { "type": "string" },
          "filePath": { "type": "string", "format": "uri-reference" }
        }
      },
      "FavoriteCarInput": {
        "type": "object",
        "required": ["carId"],
        "properties": {
          "carId": { "type": "string", "format": "ObjectId" }
        }
      },
      "BookingInput": {
        "type": "object",
        "required": ["carId", "startDate", "endDate"],
        "properties": {
          "carId": { "type": "string", "format": "ObjectId" },
          "startDate": { "type": "string", "format": "date-time" },
          "endDate": { "type": "string", "format": "date-time" },
          "status": { "type": "string", "enum": ["Pending", "Confirmed", "Cancelled", "Completed"], "nullable": true}
        }
      },
       "CheckoutInput": {
        "type": "object",
        "required": ["carId", "startDate", "endDate"],
        "properties": {
          "carId": { "type": "string", "format": "ObjectId" },
          "startDate": { "type": "string", "format": "date-time" },
          "endDate": { "type": "string", "format": "date-time" }
        }
      },
      "RazorpayVerificationInput": {
        "type": "object",
        "required": ["razorpay_order_id", "razorpay_payment_id", "razorpay_signature", "bookingId"],
        "properties": {
          "razorpay_order_id": { "type": "string" },
          "razorpay_payment_id": { "type": "string" },
          "razorpay_signature": { "type": "string" },
          "bookingId": { "type": "string", "format": "ObjectId" }
        }
      },
      "AdminCarInput": {
        "allOf": [
          { "$ref": "#/components/schemas/Car" },
          { "type": "object", "properties": { "id": { "readOnly": true }, "rating": {"readOnly": true}, "reviews": {"readOnly": true} }}
        ]
      },
      "AdminUpdateCarInput": {
         "allOf": [
          { "$ref": "#/components/schemas/Car" }
        ],
        "description": "All fields are optional for update."
      },
      "AdminUserInput": {
        "type": "object",
        "required": ["name", "email", "password", "role"],
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "phoneNumber": { "type": "string", "nullable": true },
          "password": { "type": "string", "minLength": 6 },
          "role": { "type": "string", "enum": ["Customer", "Manager", "Admin"] }
        }
      },
      "AdminUpdateUserInput": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "nullable": true },
          "phoneNumber": { "type": "string", "nullable": true },
          "role": { "type": "string", "enum": ["Customer", "Manager", "Admin"], "nullable": true }
        }
      },
      "AdminUpdateDocumentStatusInput": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": { "type": "string", "enum": ["Approved", "Rejected"] },
          "adminComments": { "type": "string", "nullable": true }
        }
      },
      "AdminUpdateBookingStatusInput": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": { "type": "string", "enum": ["Confirmed", "Cancelled", "Completed", "Cancellation Rejected"] }
        }
      },
      "AdminSiteSettingsInput": {
         "allOf": [
          { "$ref": "#/components/schemas/SiteSettings" }
        ],
        "description": "SMTP Password is write-only and not returned. All fields are optional for update.",
        "properties": {
           "smtpPass": { "type": "string", "format": "password", "nullable": true, "writeOnly": true }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegisterInput" } } }
        },
        "responses": {
          "201": { "description": "User registered successfully", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" }, "user": { "$ref": "#/components/schemas/User" } } } } } },
          "400": { "description": "Bad Request (e.g., missing fields, password too short)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "409": { "description": "User already exists", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login an existing user",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/LoginInput" } } }
        },
        "responses": {
          "200": { "description": "Login successful", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" }, "token": { "type": "string" }, "user": { "$ref": "#/components/schemas/User" } } } } } },
          "400": { "description": "Bad Request (e.g., missing email/password)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Invalid credentials", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "summary": "Request a password reset link",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ForgotPasswordInput" } } }
        },
        "responses": {
          "200": { "description": "Password reset link sent (if user exists)", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" } } } } } },
          "400": { "description": "Bad Request (e.g., email required)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "summary": "Reset password using a token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ResetPasswordInput" } } }
        },
        "responses": {
          "200": { "description": "Password reset successfully", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" } } } } } },
          "400": { "description": "Bad Request (e.g., token/password required, invalid token)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/cars": {
      "get": {
        "summary": "Get all cars (public listing)",
        "tags": ["Cars (Public)"],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 9 } },
          { "name": "search", "in": "query", "schema": { "type": "string" } },
          { "name": "type", "in": "query", "schema": { "type": "string", "enum": ["Sedan", "SUV", "Hatchback", "Truck", "Van", "Convertible", "Coupe", "all"] } },
          { "name": "minPrice", "in": "query", "schema": { "type": "number" } },
          { "name": "maxPrice", "in": "query", "schema": { "type": "number" } }
        ],
        "responses": {
          "200": {
            "description": "List of cars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": { "type": "array", "items": { "$ref": "#/components/schemas/Car" } },
                    "totalItems": { "type": "integer" },
                    "totalPages": { "type": "integer" },
                    "currentPage": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/cars/{id}": {
      "get": {
        "summary": "Get single car details (public)",
        "tags": ["Cars (Public)"],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "responses": {
          "200": { "description": "Car details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Car" } } } },
          "400": { "description": "Invalid car ID format", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Car not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/profile": {
      "get": {
        "summary": "Get current user's profile",
        "tags": ["User Profile"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "User profile data", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "User not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      },
      "put": {
        "summary": "Update current user's profile",
        "tags": ["User Profile"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ProfileUpdateInput" } } }
        },
        "responses": {
          "200": { "description": "Profile updated successfully", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" }, "user": { "$ref": "#/components/schemas/User" } } } } } },
          "400": { "description": "Bad Request (validation error)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/profile/documents": {
      "post": {
        "summary": "Record uploaded document for current user",
        "tags": ["User Profile"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/DocumentUploadInput" } } }
        },
        "responses": {
          "200": { "description": "Document details recorded", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" }, "user": { "$ref": "#/components/schemas/User" } } } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/profile/favorites": {
      "get": {
        "summary": "Get user's favorite cars",
        "tags": ["User Profile"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "List of favorite cars", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Car" } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      },
      "post": {
        "summary": "Add a car to favorites",
        "tags": ["User Profile"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FavoriteCarInput" } } }
        },
        "responses": {
          "200": { "description": "Car added to favorites", "content": { "application/json": { "schema": { "type": "object", "properties": { "favoriteCarIds": { "type": "array", "items": { "type": "string" } } } } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/profile/favorites/{carId}": {
      "delete": {
        "summary": "Remove a car from favorites",
        "tags": ["User Profile"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "carId", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "responses": {
          "200": { "description": "Car removed from favorites", "content": { "application/json": { "schema": { "type": "object", "properties": { "favoriteCarIds": { "type": "array", "items": { "type": "string" } } } } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/profile/bookings": {
      "get": {
        "summary": "Get user's bookings",
        "tags": ["User Profile"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "List of user's bookings", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/Booking" } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
     "/api/bookings": {
      "post": {
        "summary": "Create a booking (direct)",
        "tags": ["Bookings"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BookingInput" } } }
        },
        "responses": {
          "201": { "description": "Booking created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Booking" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Car not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "409": { "description": "Car already booked", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/bookings/{bookingId}/request-cancellation": {
      "post": {
        "summary": "Request cancellation for a booking",
        "tags": ["Bookings"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "bookingId", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "responses": {
          "200": { "description": "Cancellation requested successfully", "content": { "application/json": { "schema": { "type": "object", "properties": { "message": { "type": "string" } } } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Booking not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/checkout/razorpay-order": {
      "post": {
        "summary": "Create Razorpay order and pending booking",
        "tags": ["Checkout"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/CheckoutInput" } } }
        },
        "responses": {
          "200": { "description": "Razorpay order created", "content": { "application/json": { "schema": {
            "type": "object",
            "properties": {
              "message": {"type": "string"}, "bookingId": {"type": "string"}, "razorpayOrderId": {"type": "string"},
              "amount": {"type": "number"}, "currency": {"type": "string"}, "keyId": {"type": "string"},
              "userName": {"type": "string"}, "userEmail": {"type": "string"}
            }
          }}}},
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/checkout/razorpay-verify": {
      "post": {
        "summary": "Verify Razorpay payment",
        "tags": ["Checkout"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RazorpayVerificationInput" } } }
        },
        "responses": {
          "200": { "description": "Payment verified", "content": { "application/json": { "schema": {
             "type": "object", "properties": { "message": {"type": "string"}, "bookingId": {"type": "string"} }
          }}}},
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/settings": {
      "get": {
        "summary": "Get public site settings",
        "tags": ["Site Settings"],
        "responses": {
          "200": { "description": "Site settings", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SiteSettings" } } } }
        }
      }
    },
    "/api/upload": {
      "post": {
        "summary": "Upload a file",
        "tags": ["File Upload"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "destination", "in": "query", "schema": { "type": "string", "enum": ["images", "documents"], "default": "images" } }],
        "requestBody": {
          "required": true,
          "content": { "multipart/form-data": { "schema": { "type": "object", "properties": { "file": { "type": "string", "format": "binary" } } } } }
        },
        "responses": {
          "201": { "description": "File uploaded successfully", "content": { "application/json": { "schema": {
            "type": "object", "properties": {"success": {"type": "boolean"}, "filePath": {"type": "string"}, "originalName": {"type": "string"}}
          }}}},
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/cars": {
      "get": {
        "summary": "Admin: Get all cars",
        "tags": ["Admin - Cars"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } },
          { "name": "search", "in": "query", "schema": { "type": "string" } },
          { "name": "type", "in": "query", "schema": { "type": "string", "enum": ["Sedan", "SUV", "Hatchback", "Truck", "Van", "Convertible", "Coupe", "all"] } }
        ],
        "responses": {
          "200": { "description": "List of cars", "content": { "application/json": { "schema": { "$ref": "#/paths/~1api~1cars/get/responses/200/content/application~1json/schema" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      },
      "post": {
        "summary": "Admin: Add new car",
        "tags": ["Admin - Cars"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminCarInput" } } }
        },
        "responses": {
          "201": { "description": "Car added successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Car" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/cars/{id}": {
      "get": {
        "summary": "Admin: Get single car",
        "tags": ["Admin - Cars"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "responses": {
          "200": { "description": "Car details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Car" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Car not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      },
      "put": {
        "summary": "Admin: Update car",
        "tags": ["Admin - Cars"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateCarInput" } } }
        },
        "responses": {
          "200": { "description": "Car updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Car" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Car not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      },
      "delete": {
        "summary": "Admin: Delete car",
        "tags": ["Admin - Cars"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "responses": {
          "200": { "description": "Car deleted successfully", "content": { "application/json": { "schema": { "type": "object", "properties": {"message": {"type": "string"}} } } } },
          "400": { "description": "Bad Request (e.g. active bookings)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Car not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/users": {
      "get": {
        "summary": "Admin: Get all users",
        "tags": ["Admin - Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } }
        ],
        "responses": {
          "200": { "description": "List of users", "content": { "application/json": { "schema": {
            "type": "object", "properties": {
              "data": {"type": "array", "items": {"$ref": "#/components/schemas/User"}},
              "totalItems": {"type": "integer"}, "totalPages": {"type": "integer"}, "currentPage": {"type": "integer"}
            }
          }}}},
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      },
      "post": {
        "summary": "Admin: Add new user",
        "tags": ["Admin - Users"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminUserInput" } } }
        },
        "responses": {
          "201": { "description": "User created successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "409": { "description": "User already exists", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/users/{id}": {
      "get": {
        "summary": "Admin: Get single user",
        "tags": ["Admin - Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "responses": {
          "200": { "description": "User details", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "User not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      },
      "put": {
        "summary": "Admin: Update user",
        "tags": ["Admin - Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "id", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateUserInput" } } }
        },
        "responses": {
          "200": { "description": "User updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "User not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/users/{id}/documents/{documentType}": {
      "put": {
        "summary": "Admin: Update user document status",
        "tags": ["Admin - Users"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "description": "User ID", "schema": { "type": "string", "format": "ObjectId" } },
          { "name": "documentType", "in": "path", "required": true, "description": "Type of document", "schema": { "type": "string", "enum": ["PhotoID", "DrivingLicense"] } }
        ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateDocumentStatusInput" } } }
        },
        "responses": {
          "200": { "description": "Document status updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "User or document not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/bookings": {
      "get": {
        "summary": "Admin: Get all bookings",
        "tags": ["Admin - Bookings"],
        "security": [{ "bearerAuth": [] }],
         "parameters": [
          { "name": "page", "in": "query", "schema": { "type": "integer", "default": 1 } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } }
        ],
        "responses": {
          "200": { "description": "List of bookings", "content": { "application/json": { "schema": {
            "type": "object", "properties": {
              "data": {"type": "array", "items": {"$ref": "#/components/schemas/Booking"}},
              "totalItems": {"type": "integer"}, "totalPages": {"type": "integer"}, "currentPage": {"type": "integer"}
            }
          }}}},
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/bookings/{bookingId}/status": {
      "put": {
        "summary": "Admin: Update booking status",
        "tags": ["Admin - Bookings"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "bookingId", "in": "path", "required": true, "schema": { "type": "string", "format": "ObjectId" } }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminUpdateBookingStatusInput" } } }
        },
        "responses": {
          "200": { "description": "Booking status updated", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Booking" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Booking not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/reports": {
      "get": {
        "summary": "Admin: Get booking reports",
        "tags": ["Admin - Reports"],
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "startDate", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "endDate", "in": "query", "schema": { "type": "string", "format": "date" } },
          { "name": "status", "in": "query", "schema": { "type": "string", "enum": ["Pending", "Confirmed", "Cancelled", "Completed", "Cancellation Requested", "Cancellation Rejected", "All"] } }
        ],
        "responses": {
          "200": { "description": "Booking report data", "content": { "application/json": { "schema": {
            "type": "object", "properties": {
              "totalBookings": {"type": "integer"}, "totalRevenue": {"type": "number"},
              "bookings": {"type": "array", "items": {"$ref": "#/components/schemas/Booking"}},
              "currencySymbol": {"type": "string"}, "currency": {"type": "string"}
            }
          }}}},
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/stats": {
      "get": {
        "summary": "Admin: Get dashboard statistics",
        "tags": ["Admin - Dashboard"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Dashboard statistics", "content": { "application/json": { "schema": {
            "type": "object", "properties": {
              "totalRevenue": {"type": "number"}, "totalUsers": {"type": "integer"}, "totalCars": {"type": "integer"},
              "pendingBookingsCount": {"type": "integer"}, "defaultCurrency": {"type": "string"},
              "recentBookings": {"type": "array", "items": {"$ref": "#/components/schemas/Booking"}},
              "newUsers": {"type": "array", "items": {"$ref": "#/components/schemas/User"}}
            }
          }}}},
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/api/admin/settings": {
      "get": {
        "summary": "Admin: Get site settings",
        "tags": ["Admin - Settings"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": { "description": "Site settings", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SiteSettings" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      },
      "put": {
        "summary": "Admin: Update site settings",
        "tags": ["Admin - Settings"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AdminSiteSettingsInput" } } }
        },
        "responses": {
          "200": { "description": "Settings updated successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SiteSettings" } } } },
          "400": { "description": "Bad Request", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    }
  }
}
